#####################################################################
# Edit util
#####################################################################
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

    let g:easy_align_delimiters = {
    \ '>': { 'pattern': '>>\|=>\|>' },
    \ '/': {
    \     'pattern':         '//\+\|/\*\|\*/',
    \     'delimiter_align': 'l',
    \     'ignore_groups':   ['!Comment'] },
    \ ']': {
    \     'pattern':       '[[\]]',
    \     'left_margin':   0,
    \     'right_margin':  0,
    \     'stick_to_left': 0
    \   },
    \ ')': {
    \     'pattern':       '[()]',
    \     'left_margin':   0,
    \     'right_margin':  0,
    \     'stick_to_left': 0
    \   },
    \ 'd': {
    \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
    \     'left_margin':  0,
    \     'right_margin': 0
    \   }
    \ }
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'InsertEnter'
hook_source = '''
	let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
    let g:sandwich#recipes += [
        \   {
        \     'buns'    : ['TagInput(1)', 'TagInput(0)'],
        \     'expr'    : 1,
        \     'filetype': ['html'],
        \     'kind'    : ['add', 'replace'],
        \     'action'  : ['add'],
        \     'input'   : ['t'],
        \   },
        \ ]

    function! TagInput(is_head) abort
        if a:is_head
            let s:TagLast = input('Tag: ')
            if s:TagLast !=# ''
                let tag = printf('<%s>', s:TagLast)
            else
                throw 'OperatorSandwichCancel'
            endif
        else
            let tag = printf('</%s>', matchstr(s:TagLast, '^\a[^[:blank:]>/]*'))
        endif
        return tag
    endfunction

'''


#####################################################################
# Fuzzy Finder
#####################################################################

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_cmd = [
  'Files',
  'GFiles',
  'GFiles?',
  'Tags',
  'Commands',
  'Rg',
  'History',
  'Buffers',
  'Snippets',
  'Maps',
  'Helptags',
]
hook_add = '''
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --hidden --no-heading --color=always --smart-case -g "!.git/*" -- '.shellescape(<q-args>), 1,
        \   fzf#vim#with_preview(), <bang>0)

    fun! FzfOmniFiles()
        let is_git = system('git status')
        if v:shell_error
            :Files
        else
            :GFiles
        endif
    endfun

    nnoremap <C-j><C-j> :Commands<CR>
    nnoremap <C-j><C-h> :History<CR>
    nnoremap <C-j><C-p> :call FzfOmniFiles()<CR>
    nnoremap <C-j><C-g> :Rg<Space>
    nnoremap <C-j><C-b> :Buffers<CR>
    nnoremap <C-j>. :<C-u>Files ~/.dotfiles<CR>
'''

#####################################################################
# Filer
#####################################################################
[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
on_cmd = 'Defx'
depends = ['defx-icons']
hook_add = '''
	nnoremap <silent> <leader>f :<C-u>Defx<CR>

    autocmd FileType defx call s:defx_my_settings()

    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>  defx#do_action('drop')
        nnoremap <silent><buffer><expr> c     defx#do_action('copy')
        nnoremap <silent><buffer><expr> m     defx#do_action('move')
        nnoremap <silent><buffer><expr> p     defx#do_action('paste')
        nnoremap <silent><buffer><expr> l     defx#do_action('drop')
        nnoremap <silent><buffer><expr> t     defx#do_action('open','tabnew')
        nnoremap <silent><buffer><expr> E     defx#do_action('drop', 'vsplit')
        nnoremap <silent><buffer><expr> P     defx#do_action('drop', 'pedit')
        nnoremap <silent><buffer><expr> o     defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> K     defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N     defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M     defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C     defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S     defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d     defx#do_action('remove')
        nnoremap <silent><buffer><expr> r     defx#do_action('rename')
        nnoremap <silent><buffer><expr> !     defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x     defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;     defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h     defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~     defx#do_action('cd')
        nnoremap <silent><buffer><expr> q     defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Tab> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *     defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j     line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k     line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> cd    defx#do_action('change_vim_cwd')
    endfunction
'''
hook_source = '''

    call defx#custom#column('filename', {
        \ 'directory_icon': '',
        \ 'opened_icon': '',
        \ })

    call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })

    call defx#custom#option('_', {
        \ 'winwidth': 40,
        \ 'split': 'vertical',
        \ 'direction': 'topleft',
        \ 'show_ignored_files': 1,
        \ 'buffer_name': 'exlorer',
        \ 'toggle': 1,
        \ 'resume': 1,
        \ 'columns': 'mark:indent:icons:filename:type:size:time',
        \ })
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

