# vim: foldmethod=marker
# vim: foldcolumn=2
# vim: foldlevel=0

# general {{{1
[[snippets]]
  description = "Start swagger-ui docker"
  command = "docker run -v (PWD)/doc:/usr/share/nginx/html/doc -p 80:8080 -e URL=doc/swagger.yaml swaggerapi/swagger-ui"
  tag = ["docker", "server"]
  output = ""
[[snippets]]
  description = "compress PNG"
  command = "pngquant --ext .png --force --speed 1 ./*.png"
  tag = ["util"]
  output = ""
[[snippets]]
  description = "SVGファイルをvueのcomponentに変換する"
  command = "find . -type f -name \"*.svg\" | xargs -i bash -c \"cat {} | sed -e '/svg/d' -e '/^    <g/d' -e '/^    <\\/g>/d' | sed -e '1i<template>' -e '\\$a</template>' > {}.bk\""
  tag = ["svg", "vue"]
  output = ""
[[snippets]]
  description = "vueにscriptタグを追加する"
  command = """fd -e vue | xargs -i sed -i -e '$a<script lang="ts">\\nimport Vue from \\'vue\\'\\nexport default Vue.extend(\\{\\})\\n</script>' {}"""
  tag = ["svg", "vue"]
  output = ""
[[snippets]]
  description = "ファイル名のcamel,snake,kebab case変換"
  command = "find . -type f -name \"*.vue\" | xargs -i rename 's/-([a-z])/\\U$1/' {}"
  tag = ["rename", "case", "filename"]
  output = ""
[[snippets]]
  description = "ffmpegでmovファイルをgifに変換 ss,tで切り取る秒数を指定 vfで大きさ,再生速度を指定"
  command = "ffmpeg -i $FILE.mov -an -r 8 -pix_fmt rgb8 -ss 0 -t 60 -vf scale=480:-1,setpts=PTS/2.0 -f gif $FILE.gif"
  tag = ["ffmpeg"]
  output = ""
[[snippets]]
  description = "sort by nth column with delimiter tab"
  command = "LC_ALL=C sort -t$'\\t' -k 3 -r"
  output = ""
[[snippets]]
  description = "kibana filter by path regexp"
  command = """{
  "query": {
    "regexp": {
      "path": {
        "value": ".*/<regexp>/.*"
      }
    }
  }
}"""
  tag = ["kibana"]
  output = ""
[[snippets]]
  description = "diff war"
  command = """WAR=<war>; SUFFIX=<suffix>; diff <(unzip -l $WAR.war.$SUFFIX | awk '{print $1, $4}' | sort -k2) <(unzip -l $WAR.war | awk '{print $1, $4}' | sort -k2)"""
  tag = ["shell"]
  output = ""
[[snippets]]
  description = "aliases"
  command = """alias ls='ls -CF --color=auto'
alias ll='ls -AlFh --show-control-chars'"""
  tag = ["shell"]
  output = ""
[[snippets]]
  description = "ripgrep search and replace"
  command = """SEARCH=<search>; TO=<replaceto>; rg -l "$SEARCH" | xargs sd "$SEARCH" "$TO" """
  tag = ["shell"]
[[snippets]]
  description = "npm list without dependencies"
  command = """npm list -g --depth 0"""
  tag = ["npm"]
  output = ""
[[snippets]]
  description = "apply karabiner.edn"
  command = """GOKU_EDN_CONFIG_FILE=$XDG_CONFIG_HOME/karabiner/karabiner.edn goku && jq --sort-keys --indent 4 '.' $XDG_CONFIG_HOME/karabiner/karabiner.json > /tmp/karabiner.json && mv /tmp/karabiner.json $XDG_CONFIG_HOME/karabiner/karabiner.json"""
  tag = ["npm"]
  output = ""
[[snippets]]
  description = "change slackapp font"
  command = """/slackfont "HackGen Console NF""""
  tag = ["slack"]
  output = ""
[[snippets]]
  description = "go build cross platform"
  command = """CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-s -w' -trimpath"""
  tag = ["go"]
  output = ""

[[snippets]]
  description = "xml select element example"
  command = """xmlstarlet sel -t -c '/Properties/Property[@key="<key>"]/Entity[@name="<name>"]' <filepath>"""
  tag = ["xml"]
  output = ""
[[snippets]]
  description = "xml format"
  command = """xmlstarlet fo -s 4 <filepath>"""
  tag = ["xml"]
  output = ""
[[snippets]]
  description = "xml delete element matches xpath"
  command = """xmlstarlet ed -P --inplace       -d '/Properties/Property[@key="trainmail"]' <filepath>"""
  tag = ["xml"]
  output = ""


# git {{{1
[[snippets]]
  description = "git tag sort by created date"
  command = "git tag -l --sort=-creatordate --format='%(creatordate:iso-strict) %(refname:short) %(subject) %(creator)'"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git count number of commits"
  command = "git shortlog -s"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git count lines by author"
  command = "SINCE=YYYY-MM-DD UNTIL=YYYY-MM-DD git log --numstat --pretty='%H' --author='<author>' --since=$SINCE --until=$UNTIL --no-merges | awk 'NF==3 {plus+=$1; minus+=$2} END {printf(\"%d (+%d, -%d)\\n\", plus+minus, plus, minus)}'"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git lfs resolve 'Encountered N file(s) that should have been pointers'"
  command = "git status -s | cut -d' ' -f 3- | xargs git update-index --assume-unchanged"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git diff side by side"
  command = "git -c delta.side-by-side=true diff ."
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git diff context 0"
  command = "git -c diff.context=0 -c diff.interHunkContext=0 diff ."
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git pager less"
  command = "git -c pager.diff=less diff ."
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git shallow clone"
  command = "git clone --depth=1 -b main "
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git diff with origin"
  command = "git diff --name-status @{u}..HEAD"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git get branch name"
  command = "git rev-parse --abbrev-ref HEAD"
  tag = ["git"]
  output = ""
[[snippets]]
  description = "git diff with origin"
  command = "git diff --name-status @{u}..HEAD"
  tag = ["git"]
  output = ""


# awscli {{{1
[[snippets]]
  description = "docker login to ecr"
  command = "aws --region ap-northeast-1 ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.region.amazonaws.com"
  tag = ["awscli"]
  output = ""

# kubectl {{{1
[[snippets]]
  description = "get pending pods"
  command = "get pods --field-selector status.phase=Pending"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "get pods and node"
  command = "get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces"
  tag = ["kubectl"]
  output = ""

# mvn {{{1
[[snippets]]
  description = "download binary, source"
  command = "mvn dependency:resolve dependency:sources"
  tag = ["mvn"]
  output = ""
[[snippets]]
  description = "check if dependency is used"
  command = "mvn dependency:analyze"
  tag = ["mvn"]
  output = ""
[[snippets]]
  description = "download binary, source"
  command = "mvn dependency:resolve dependency:sources"
  tag = ["mvn"]
  output = ""
[[snippets]]
  description = "download binary, source"
  command = "mvn dependency:resolve dependency:sources"
  tag = ["mvn"]
  output = ""



# server {{{1
[[snippets]]
  description = "docker exec bash in ECS"
  command = """docker exec -it $(docker ps -f 'name=<container=app>' -q) bash
alias ll='ls -alh --color=auto'
cd /usr/local/tomcat"""
  tag = ["docker", "ECS"]
  output = ""
[[snippets]]
  description = "docker cp file from container"
  command = """docker cp $(docker ps -f 'name=app' -q):/usr/local/tomcat/webapps/ ./"""
  tag = ["docker", "ECS"]
  output = ""
[[snippets]]
  description = "docker cp file to container"
  command = """docker cp $(ls -1 *.war) $(docker ps -f 'name=app' -q):/tmp"""
  tag = ["docker", "ECS"]
  output = ""
[[snippets]]
  description = "tail access_log"
  command = """tail -f access_log | grep --line-buffered -E '<regexp>' | awk '{ print $4,$5,$6,$7,$9; fflush() }'"""
  tag = ["server"]
  output = ""

# badge {{{1
[[snippets]]
  description = "must"
  command = "![badge](https://img.shields.io/badge/review-must-red.svg)"
  tag = ["badge"]
  output = ""
[[snippets]]
  description = "ask"
  command = "![badge](https://img.shields.io/badge/review-ask-blue.svg)"
  tag = ["badge"]
  output = ""
[[snippets]]
  description = "comment"
  command = "![badge](https://img.shields.io/badge/review-comment-green.svg)"
  tag = ["badge"]
  output = ""
[[snippets]]
  description = "suggest"
  command = "![badge](https://img.shields.io/badge/review-suggest-orange.svg)"
  tag = ["badge"]
  output = ""

